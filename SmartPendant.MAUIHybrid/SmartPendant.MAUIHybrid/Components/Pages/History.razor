@page "/history"
@inject IConversationRepository ConversationRepository
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
    <div class="d-flex justify-center mb-4 my-lg-6 align-center gap-4">
        <MudIcon Icon="@Icons.Material.Filled.History" Title="Favorite" Size="Size.Large" />
        <MudText Typo="Typo.h4">Case History</MudText>
    </div>
    <MudTabs Centered ApplyEffectsToContainer PanelClass="mt-4" Class="history" ActiveTabClass="border-solid border-2 mud-border-primary rounded-t">
        <MudTabPanel Text="Date" Icon="@Icons.Material.Filled.DateRange">
             <div class="d-flex align-center flex-grow-1 gap-4 pt-4 mb-4">
                    <MudTextField 
                            @bind-Value="searchQuery"
                            AdornmentIcon="@Icons.Material.Outlined.Search" 
                            Adornment="Adornment.End" 
                            Label="Search" 
                            DebounceInterval="100" 
                            Variant="Variant.Outlined" 
                            Clearable
                            FullWidth
                            Immediate="false"
                            OnDebounceIntervalElapsed="OnSearchChanged" />
                    <MudDateRangePicker 
                            DateRange="dateRange"
                            DateRangeChanged="OnDateRangeChanged"
                            Label="Date Range"
                            Placeholder="Select dates..." 
                            PickerVariant="PickerVariant.Dialog" 
                            Variant="Variant.Outlined"    
                            Clearable/>
                </div>
            @if (isLoading)
            {
                <MudProgressCircular Class="mx-auto d-block" Indeterminate />
            }
            else if (!filteredConversations.Any())
            {
                <MudPaper Elevation="0" Class="pa-10 mt-10" Style="text-align:center">
                    <MudIcon Icon="@Icons.Material.Outlined.SearchOff" Size="Size.Large" Color="Color.Secondary" Class="mb-2" />
                    <MudText Typo="Typo.h6" Color="Color.Secondary">No data found</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Try adjusting your search criteria or date range
                    </MudText>
                </MudPaper>
            }
            else
            {
                <MudText Typo="Typo.body2" Color="Color.Info" Class="mb-3 px-2">
                    Showing @filteredConversations.Count of @Conversations.Count conversations
                </MudText>
                
                <MudGrid Spacing="3" Style="margin-bottom:50px;">
                    @foreach (var conversationGroup in GetGroupedConversations())
                    {
                        <MudItem xs="12" class="pa-2">
                            <div class="d-flex align-center justify-space-between pa-2 cursor-pointer" 
                                 @onclick="() => ToggleGroup(conversationGroup.Key)">
                                <MudText Typo="Typo.h6">
                                    @conversationGroup.Key.ToString("MMMM dd, yyyy")
                                </MudText>
                                <div class="d-flex align-center gap-2">
                                    <MudChip Size="Size.Small" Color="Color.Info" Variant="Variant.Outlined" T="string">
                                        @conversationGroup.Count() conversation@(conversationGroup.Count() != 1 ? "s" : "")
                                    </MudChip>
                                    <MudIconButton 
                                        Icon="@(IsGroupExpanded(conversationGroup.Key) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                        Size="Size.Medium"
                                        OnClick="() => ToggleGroup(conversationGroup.Key)"
                                        Color="Color.Inherit" />
                                </div>
                            </div>
                            <MudDivider Class="mb-3" />
                            
                            <MudCollapse Expanded="IsGroupExpanded(conversationGroup.Key)">
                                <MudGrid Spacing="3">
                                    @foreach (var conversation in conversationGroup.OrderByDescending(c => c.CreatedAt))
                                    {
                                        <MudItem xs="12">
                                            <ConversationCard 
                                                Conversation="@conversation" 
                                                OnConversationSelected="@ViewConversationAsync"
                                                OnConversationDeleted="@DeleteConversationAsync"/>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudCollapse>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudTabPanel>
        <MudTabPanel Text="Patient" Icon="@Icons.Material.Filled.MyLocation">
           
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    private List<ConversationRecord> Conversations = new();
    private List<ConversationRecord> filteredConversations = new();
    private HashSet<DateTime> expandedGroups = new();
    private bool allExpanded = true;

    private string searchQuery = string.Empty;
    private DateRange? dateRange;
    private HashSet<string> selectedTags = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadConversationsAsync();
    }

    private async Task LoadConversationsAsync()
    {
        isLoading = true;
        try
        {
            Conversations = await ConversationRepository.GetAllConversationsAsync();
            filteredConversations = Conversations.ToList();

            InitializeExpandedGroups();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeExpandedGroups()
    {
        expandedGroups.Clear();
        var groupDates = GetGroupedConversations().Select(g => g.Key);
        foreach (var date in groupDates)
        {
            expandedGroups.Add(date);
        }
        allExpanded = true;
    }

    private bool IsGroupExpanded(DateTime groupDate)
    {
        return expandedGroups.Contains(groupDate);
    }

    private void ToggleGroup(DateTime groupDate)
    {
        if (expandedGroups.Contains(groupDate))
        {
            expandedGroups.Remove(groupDate);
        }
        else
        {
            expandedGroups.Add(groupDate);
        }

        // Update allExpanded state
        var totalGroups = GetGroupedConversations().Count();
        allExpanded = expandedGroups.Count == totalGroups;

        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await FilterConversations();
    }

    private async Task OnDateRangeCleared()
    {
        dateRange = null;
        await FilterConversations();
    }

    private async Task OnDateRangeChanged(DateRange range)
    {
        dateRange = range;
        await FilterConversations();
    }

    private async Task FilterConversations()
    {
        await Task.Delay(100);

        var filtered = Conversations.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filtered = filtered.Where(c => 
                c.Title?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true ||
                c.Summary?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true);
        }

        // Apply date range filter
        if (dateRange != null && dateRange.Start != null && dateRange.End != null)
        {
            filtered = filtered.Where(c => 
                c.CreatedAt.Date >= dateRange.Start.Value.Date && 
                c.CreatedAt.Date <= dateRange.End.Value.Date);
        }

        filteredConversations = filtered.ToList();

        // Update expanded groups after filtering
        InitializeExpandedGroups();

        StateHasChanged();
    }

    private IEnumerable<IGrouping<DateTime, ConversationRecord>> GetGroupedConversations()
    {
        return filteredConversations
            .GroupBy(c => c.CreatedAt.Date)
            .OrderByDescending(g => g.Key);
    }

    private IEnumerable<string> GetAvailableTopics()
    {
        return Conversations.SelectMany(c => c.ConversationInsights?.Topics!);
    }

    private IEnumerable<string> GetAvailableTags()
    {
        return Conversations
            .SelectMany(c => c.Tags ?? Enumerable.Empty<string>())
            .Distinct()
            .OrderBy(t => t);
    }

    private void ToggleTag(string tag, bool selected)
    {
        if (selected)
            selectedTags.Add(tag);
        else
            selectedTags.Remove(tag);

        StateHasChanged();
    }

    private void ViewConversationAsync(ConversationRecord conversation)
    {
        NavigationManager.NavigateTo($"/conversation/{conversation.Id}");
    }

    private async Task DeleteConversationAsync(ConversationRecord? conversation)
    {
        if (conversation == null)
            return;

        await ConversationRepository.DeleteConversationAsync(conversation.Id);
        await LoadConversationsAsync();
    }
}