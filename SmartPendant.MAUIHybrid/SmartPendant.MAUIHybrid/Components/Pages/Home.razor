@page "/"
@using SmartPendant.MAUIHybrid.Data
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject IOrchestrationService OrchestrationService

<MudStack Justify="Justify.SpaceBetween" Class="mx-2 full-height-container">
    @* Header Section *@
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4 flex-shrink-0">
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudIcon Icon="@(OrchestrationService.IsDeviceConnected? Icons.Material.Filled.BluetoothConnected : Icons.Material.Filled.Bluetooth)"
                     Color="@(OrchestrationService.IsDeviceConnected ? Color.Success : Color.Error)" />
            <MudText Typo="Typo.body1" Color="@(OrchestrationService.IsDeviceConnected? Color.Success: Color.Error)">
                @(OrchestrationService.IsDeviceConnected ? "Connected" : "Disconnected")
            </MudText>
        </MudStack>
        @if (OrchestrationService.IsRecording)
        {
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mr-3">
                <span class="recording-indicator"></span>
                <MudText Typo="Typo.body1" Color="Color.Error">Recording</MudText>
            </MudStack>
        }
    </MudStack>

    @* Conversation Container *@
    <div class="conversation-wrapper">
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height: 100vh; max-width: 400px; margin: 0 auto;">
            <MudSpacer />
            <!-- Main Content -->
            <MudStack AlignItems="AlignItems.Center" Spacing="6">

                <!-- Animated Live Icon -->
                <div class="live-icon-container">
                    <div class="pulse-ring"></div>
                    <MudPaper Class="live-icon-paper">
                        <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord"
                                 Class="live-icon" />
                    </MudPaper>
                </div>

                <!-- Title -->
                <MudText Typo="Typo.h4" Align="Align.Center" Style="font-weight: 700;">
                    CarePulse is Active
                </MudText>

                <!-- Subtitle -->
                <MudText Typo="Typo.body1" Align="Align.Center" Class="mud-text-secondary" Style="max-width: 300px;">
                    Making your invisible work visible. Focus on your patient—we'll capture the insights.
                </MudText>
            </MudStack>

            <!-- Spacer to push footer to bottom -->
            <MudSpacer />

            <!-- Footer Button -->
            <MudStack AlignItems="AlignItems.Center" Style="width: 100%;">
                <MudButton OnClick="ToggleRecordingAsync"
                           Disabled="@OrchestrationService.IsStateChanging" Variant="Variant.Outlined"
                           StartIcon="@(OrchestrationService.IsRecording ? Icons.Material.Filled.Stop : Icons.Material.Filled.Mic)"
                           Color="@(OrchestrationService.IsRecording ? Color.Error : Color.Primary)"
                           Class="rounded-xl py-3"
                           FullWidth="true">
                    @if (OrchestrationService.IsStateChanging)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>@(OrchestrationService.IsRecording ? "Go Private" : "Resume")</MudText>
                    }
                </MudButton>
                <MudText Typo="Typo.caption" Align="Align.Center" Class="mud-text-secondary" Style="font-size: 12px; margin-top: 12px;">
                    Tap to pause for breaks or private conversations.
                </MudText>
            </MudStack>
        </MudStack>
    </div>

    @* Footer Section *@
    <MudStack Justify="Justify.SpaceEvenly" Row
              AlignItems="AlignItems.Center"
              Style="max-width: 400px; width: 100%; margin: 0 auto;"
              Class="py-4 flex-shrink-0">
      
    </MudStack>
</MudStack>

@code {
    #region Fields

    private bool _isDesktop
    {
        get
        {
            return (DeviceInfo.Platform == DevicePlatform.WinUI ||
                    DeviceInfo.Platform == DevicePlatform.macOS);
        }
    }

    #endregion

    #region Lifecycle Methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (_isDesktop)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        }
        Snackbar.Configuration.ShowTransitionDuration = 500;
        // Subscribe to state changes from the orchestration service.
        OrchestrationService.StateHasChanged += OnStateHasChanged;
        OrchestrationService.Notify += OnNotify;
    }

    public async ValueTask DisposeAsync()
    {
        OrchestrationService.StateHasChanged -= OnStateHasChanged;
        OrchestrationService.Notify -= OnNotify;
    }

    #endregion

    #region UI Event Handlers

    private async Task ToggleRecordingAsync()
    {
        if (OrchestrationService.IsRecording)
        {
            await OrchestrationService.StopAsync();
        }
        else
        {
            await OrchestrationService.StartAsync();
        }
    }

    private async Task GenerateInsightAsync(bool interim = false)
    {
        try
        {
            await OrchestrationService.GenerateInsightAsync(interim);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    #endregion

    #region Service Event Handlers

    private void OnStateHasChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnNotify(object? sender, (string message, Severity severity) args)
    {
        Snackbar.Add(args.message, args.severity);
    }

    #endregion
}